"use client";

import type React from "react";

import {motion} from "framer-motion";
import {useState, useRef, useEffect} from "react";
import {Send, Bot, User, Paperclip, Mic, MoreVertical} from "lucide-react";
import DashboardHeader from '@/components/dashboard/DashboardHeader';
import {Message, sampleMessages} from '@/data/student/chat';
import {useSelector} from 'react-redux';

export default function ChatPage() {

    const [messages, setMessages] = useState<Message[]>(sampleMessages);
    const [inputValue, setInputValue] = useState("");
    const [isTyping, setIsTyping] = useState(false);
    const messagesEndRef = useRef<HTMLDivElement>(null);
    const inputRef = useRef<HTMLInputElement>(null);

    const user = useSelector((state: any) => state.auth.user);

    const scrollToBottom = () => {
        messagesEndRef.current?.scrollIntoView({behavior: "smooth"});
    };

    useEffect(() => {
        scrollToBottom();
    }, [messages]);

    const handleSendMessage = async () => {
        if (!inputValue.trim()) return;

        const userMessage: Message = {
            id: Date.now().toString(),
            type: "user",
            content: inputValue,
            timestamp: new Date(),
        };

        setMessages((prev) => [...prev, userMessage]);
        setInputValue("");
        setIsTyping(true);

        // Simulate AI response
        setTimeout(() => {
            const aiResponse: Message = {
                id: (Date.now() + 1).toString(),
                type: "ai",
                content:
                    "Thank you for your question! I'm processing your inquiry about ENT conditions. This is a simulated response that would normally be generated by our AI teacher based on the latest medical literature and evidence-based practices. The response would include detailed explanations, relevant citations, and follow-up questions to enhance your learning experience.",
                timestamp: new Date(),
                citations: ["Medical Literature Database 2024", "ENT Clinical Guidelines"],
            };

            setMessages((prev) => [...prev, aiResponse]);
            setIsTyping(false);
        }, 2000);
    };

    const handleKeyPress = (e: React.KeyboardEvent) => {
        if (e.key === "Enter" && !e.shiftKey) {
            e.preventDefault();
            handleSendMessage().then();
        }
    };

    return (
        <div className="min-h-screen flex flex-col">
            <DashboardHeader user={user}/>

            <main className="flex-1 container mx-auto px-4 py-8 flex flex-col">
                <motion.div
                    initial={{opacity: 0, y: 20}}
                    animate={{opacity: 1, y: 0}}
                    transition={{duration: 0.6}}
                    className="mb-6"
                >
                    <h1 className="text-3xl font-bold text-foreground mb-2">AI ENT Teacher</h1>
                    <p className="text-muted-foreground">Get instant answers about ENT topics with evidence-based
                        citations</p>
                </motion.div>

                {/* Chat Container */}
                <motion.div
                    initial={{opacity: 0, scale: 0.95}}
                    animate={{opacity: 1, scale: 1}}
                    transition={{duration: 0.6, delay: 0.2}}
                    className="flex-1 glass-card rounded-2xl flex flex-col overflow-hidden"
                >
                    {/* Chat Header */}
                    <div className="border-b border-border p-4 flex items-center justify-between">
                        <div className="flex items-center space-x-3">
                            <div
                                className="w-10 h-10 bg-gradient-to-r from-primary to-secondary rounded-full flex items-center justify-center">
                                <Bot className="w-6 h-6 text-primary-foreground"/>
                            </div>
                            <div>
                                <h3 className="font-semibold text-foreground">AI ENT Teacher</h3>
                                <p className="text-xs text-primary flex items-center">
                                    <div className="w-2 h-2 bg-primary rounded-full mr-2"></div>
                                    Online
                                </p>
                            </div>
                        </div>

                        <button className="p-2 hover:bg-muted rounded-lg transition-colors">
                            <MoreVertical className="w-5 h-5 text-muted-foreground"/>
                        </button>
                    </div>

                    {/* Messages */}
                    <div className="flex-1 overflow-y-auto p-4 space-y-4">
                        {messages.map((message) => (
                            <motion.div
                                key={message.id}
                                initial={{opacity: 0, y: 10}}
                                animate={{opacity: 1, y: 0}}
                                transition={{duration: 0.3}}
                                className={`flex ${message.type === "user" ? "justify-end" : "justify-start"}`}
                            >
                                <div
                                    className={`flex max-w-[80%] ${message.type === "user" ? "flex-row-reverse" : "flex-row"}`}>
                                    {/* Avatar */}
                                    <div className={`flex-shrink-0 ${message.type === "user" ? "ml-3" : "mr-3"}`}>
                                        {message.type === "user" ? (
                                            <div
                                                className="w-8 h-8 bg-primary rounded-full flex items-center justify-center">
                                                <User className="w-4 h-4 text-primary-foreground"/>
                                            </div>
                                        ) : (
                                            <div
                                                className="w-8 h-8 bg-gradient-to-r from-primary to-secondary rounded-full flex items-center justify-center">
                                                <Bot className="w-4 h-4 text-primary-foreground"/>
                                            </div>
                                        )}
                                    </div>

                                    {/* Message Content */}
                                    <div
                                        className={`flex flex-col ${message.type === "user" ? "items-end" : "items-start"}`}>
                                        <div
                                            className={`px-4 py-3 rounded-2xl ${
                                                message.type === "user" ? "bg-primary text-primary-foreground" : "bg-muted text-foreground"
                                            }`}
                                        >
                                            <p className="text-sm whitespace-pre-wrap">{message.content}</p>
                                        </div>

                                        {/* Citations */}
                                        {message.citations && message.citations.length > 0 && (
                                            <div className="mt-2 space-y-1">
                                                <p className="text-xs text-muted-foreground">Sources:</p>
                                                {message.citations.map((citation, index) => (
                                                    <div key={index}
                                                         className="text-xs text-primary hover:text-primary/80 cursor-pointer">
                                                        [{index + 1}] {citation}
                                                    </div>
                                                ))}
                                            </div>
                                        )}

                                        <p className="text-xs text-muted-foreground mt-1">
                                            {message.timestamp.toLocaleTimeString([], {
                                                hour: "2-digit",
                                                minute: "2-digit"
                                            })}
                                        </p>
                                    </div>
                                </div>
                            </motion.div>
                        ))}

                        {/* Typing Indicator */}
                        {isTyping && (
                            <motion.div initial={{opacity: 0, y: 10}} animate={{opacity: 1, y: 0}}
                                        className="flex justify-start">
                                <div className="flex mr-3">
                                    <div
                                        className="w-8 h-8 bg-gradient-to-r from-primary to-secondary rounded-full flex items-center justify-center">
                                        <Bot className="w-4 h-4 text-primary-foreground"/>
                                    </div>
                                </div>
                                <div className="bg-muted px-4 py-3 rounded-2xl">
                                    <div className="flex space-x-1">
                                        <div className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce"></div>
                                        <div
                                            className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce delay-100"></div>
                                        <div
                                            className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce delay-200"></div>
                                    </div>
                                </div>
                            </motion.div>
                        )}

                        <div ref={messagesEndRef}/>
                    </div>

                    {/* Input Area */}
                    <div className="border-t border-border p-4">
                        <div className="flex items-end space-x-3">
                            <button
                                className="p-2 text-muted-foreground hover:text-foreground transition-colors rounded-lg hover:bg-muted/50">
                                <Paperclip className="w-5 h-5"/>
                            </button>

                            <div className="flex-1 relative">
                                <input
                                    ref={inputRef}
                                    type="text"
                                    value={inputValue}
                                    onChange={(e) => setInputValue(e.target.value)}
                                    onKeyPress={handleKeyPress}
                                    placeholder="Ask about ENT conditions, symptoms, treatments..."
                                    className="w-full px-4 py-3 bg-muted/50 border border-border rounded-xl text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-200 pr-12"
                                />
                                <button
                                    className="absolute right-3 top-1/2 transform -translate-y-1/2 p-1 text-muted-foreground hover:text-foreground transition-colors">
                                    <Mic className="w-4 h-4"/>
                                </button>
                            </div>

                            <motion.button
                                onClick={handleSendMessage}
                                disabled={!inputValue.trim() || isTyping}
                                whileHover={{scale: 1.05}}
                                whileTap={{scale: 0.95}}
                                className="p-3 bg-primary text-primary-foreground rounded-xl hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 focus:ring-offset-background transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
                            >
                                <Send className="w-5 h-5"/>
                            </motion.button>
                        </div>

                        <p className="text-xs text-muted-foreground mt-2 text-center">
                            AI responses are for educational purposes only. Always consult healthcare professionals for
                            medical
                            advice.
                        </p>
                    </div>
                </motion.div>
            </main>
        </div>
    );
}
